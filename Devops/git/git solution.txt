Assignment 1 solution:

mkdir gittest
cd gittest/
nano code.txt log.txt output.txt
git init
git add code.txt output.txt
git commit -m "my first commit"
git remote add origin https://github.com/Suchendra-jpg/july28th.git
git push -u origin master 


Assignment 2 solution:

mkdir branching
cd branching/
nano feature1.txt feature2.txt
git init
git add feature1.txt feaure2.txt
git commit -m "master files"
git remote add origin https://github.com/Suchendra-jpg/july28th.git
git push -u origin master 
git branch develop feature1 feature2
git checkout develop
nano develop.txt
git stash 
git checkout feature1
nano new.txt
git add new.txt
git commit -m "commiting to feature1 branch"
git checkout develop
git stash pop
git add develop.txt
git commit -m "commiting to develop branch"


Assignment 3 solution:

mkdir branching
cd branching/
git init
git branch develop f1 f2
git checkout master.txt 
nano main.txt
git add main.txt
git commit -m "commit to master"
git checkout develop
nano develop.txt 
git add develop.txt
git commit -m "commit to develop"
git checkout f1
nano f1.txt 
git add f1.txt
git commit -m "commit to f1"
git checkout f2
nano f2.txt 
git add f2.txt
git commit -m "commit to f2"
git remote add origin https://github.com/Suchendra-jpg/july28th.git 
git push origin master develop f1 f2
git branch -d f2
git push origin --delete F2


Assignemnt 4 solution:

mkdir branching
cd branching/
git init
git checkout master
nano master.txt 
git add master.txt
git commit -m "commiting to master"
git branch public1 public2 private
git checkout public1
nano public1.txt
git add public1.txt
git commit -m "commiting to public1 branch"
git checkout master
git merge public1
git merge public2
git checkout private
nano master.txt
git add master.txt
git commit -m "commiting to private"
git checkout public1
git merge master
git checkout public2
git merge master
git checkout master
git merge private
git checkout private
git merge master


Assignemnt 5 solution:

git init
# Create and switch to the develop branch
git checkout -b develop

# Create the master branch
git branch master

# Create the feature, release, and hotfix branches (naming convention is feature/<name>, release/<version>, hotfix/<name>)
git checkout -b feature/my-feature develop
git checkout -b release/1.0.0 develop
git checkout -b hotfix/urgent-fix master
# Work on your changes and commit
git add .
git commit -m "Implemented feature: My new feature"
# Switch to the develop branch
git checkout develop

# Merge the feature branch into develop
git merge --no-ff feature/my-feature

# Push the changes to the remote develop branch
git push origin develop
# Switch to the release branch
git checkout release/1.0.0

# Update the version number in your code and commit the changes
git add .
git commit -m "Bump version to 1.0.0 for release"

# Merge the release branch into master
git checkout master
git merge --no-ff release/1.0.0

# Tag the release
git tag 1.0.0

# Push the master branch and the tag to the remote repository
git push origin master --tags
# Switch to the hotfix branch
git checkout hotfix/urgent-fix

# Apply the hotfix changes and commit them
git add .
git commit -m "Fix urgent issue: XYZ"

# Merge the hotfix branch into master
git checkout master
git merge --no-ff hotfix/urgent-fix

# Tag the hotfix
git tag hotfix-1.0.1

# Push the master branch and the tag to the remote repository
git push origin master --tags